<?xml version="1.0" encoding="UTF-8"?>
<launch>
  <!-- Specify the base path for URDF models -->
  <arg name="urdf_base_path" default="$(find quadruped)/" />

  <!-- Arguments for robot descriptions -->
  <arg name="robot1_model" default="$(arg urdf_base_path)/urdf/urdf_1/quadruped_model.xacro" />
  <arg name="robot2_model" default="$(arg urdf_base_path)/urdf/urdf_2/quadruped_model.xacro" />
  <arg name="robot3_model" default="$(arg urdf_base_path)/urdf/urdf_3/quadruped_model.xacro" />
  <arg name="robot4_model" default="$(arg urdf_base_path)/urdf/urdf_4/quadruped_model.xacro" />

  <!-- Launch Gazebo World -->
  <include file="$(find gazebo_ros)/launch/empty_world.launch">
    <arg name="world_name" value="$(find quadruped)/worlds/final_four_q_warehouse.world"/>
    <arg name="debug" value="false" />
    <arg name="gui" value="true" />
    <arg name="paused" value="false"/>
    <arg name="use_sim_time" value="true"/>
    <arg name="headless" value="false"/>

  </include>

  <!-- Load robot descriptions -->
  <param name="robot_description" command="$(find xacro)/xacro '$(find quadruped)/urdf/urdf_0/quadruped_model.xacro'" />
  <param name="robot_description_Robot1" command="$(find xacro)/xacro  $(arg robot1_model)" />
  <param name="robot_description_Robot2" command="$(find xacro)/xacro  $(arg robot2_model)" />
  <param name="robot_description_Robot3" command="$(find xacro)/xacro  $(arg robot3_model)" />
  <param name="robot_description_Robot4" command="$(find xacro)/xacro  $(arg robot4_model)" />

  <rosparam file="$(find quadruped)/config/quadruped_1_control.yaml" command="load" ns="/quadruped_1"/>
  <rosparam file="$(find quadruped)/config/quadruped_2_control.yaml" command="load" ns="/quadruped_2"/>
  <rosparam file="$(find quadruped)/config/quadruped_3_control.yaml" command="load" ns="/quadruped_3"/>
  <rosparam file="$(find quadruped)/config/quadruped_4_control.yaml" command="load" ns="/quadruped_4"/>

  <!-- Launch URDF models for each robot -->
  <group ns="robot1">
    <include file="$(find quadruped)/launch/simulation/one_robot.launch">

            <arg name="robot_name" value="/quadruped_1" />
            <arg name="model" value="$(arg robot1_model)" />
            <arg name="init_pose" value="-x 1 -y 1 -z 0" />
            <arg name="joint_controller_parent" value="/quadruped_1"/>

            <node name="controller_spawner" pkg="controller_manager" type="spawner" respawn="false"
            output="screen" ns="/quadruped_1" args="joint_trajectory_controller"/>

            <node pkg="robot_state_publisher" type="robot_state_publisher"  name="robot_state_publisher" respawn="false" output="screen">
              <remap from="/joint_states" to="/quadruped_1/joint_states" />
              <param name="publish_frequency" type="double" value="60.0" />
            </node>

            <node name="move_robot1" pkg="quadruped" type="quadruped_learn_ddpg_1.py" output="screen" />

    </include>


  </group>

  <group ns="robot2">
        <include file="$(find quadruped)/launch/simulation/one_robot.launch">


            <arg name="robot_name" value="/quadruped_2" />
            <arg name="model" value="$(arg robot2_model)" />
            <arg name="init_pose" value="-x -1 -y 1 -z 0" />

            <node name="controller_spawner" pkg="controller_manager" type="spawner" respawn="false"
            output="screen" ns="/quadruped_2" args="joint_trajectory_controller"/>

            <node pkg="robot_state_publisher" type="robot_state_publisher"  name="robot_state_publisher" respawn="false" output="screen">
              <remap from="/joint_states" to="/quadruped_2/joint_states" />
              <param name="publish_frequency" type="double" value="60.0" />
            </node>

            <node name="move_robot2" pkg="quadruped" type="quadruped_learn_ddpg_2.py" output="screen" />

    </include>

  </group>

  <group ns="robot3">
        <include file="$(find quadruped)/launch/simulation/one_robot.launch">


            <arg name="robot_name" value="/quadruped_3" />
            <arg name="model" value="$(arg robot3_model)" />
            <arg name="init_pose" value="-x 1 -y -1 -z 0" />

            <node name="controller_spawner" pkg="controller_manager" type="spawner" respawn="false"
            output="screen" ns="/quadruped_3" args="joint_trajectory_controller"/>
            

            <node pkg="robot_state_publisher" type="robot_state_publisher"  name="robot_state_publisher" respawn="false" output="screen">
              <remap from="/joint_states" to="/quadruped_3/joint_states" />
              <param name="publish_frequency" type="double" value="60.0" />
            </node>

            <node name="move_robot3" pkg="quadruped" type="quadruped_learn_ddpg_3.py" output="screen" />

    </include>
  </group>

  <group ns="robot4">
        <include file="$(find quadruped)/launch/simulation/one_robot.launch">

            <arg name="robot_name" value="/quadruped_4" />
            <arg name="model" value="$(arg robot4_model)" />
            <arg name="init_pose" value="-x -1 -y -1 -z 0" />

            <node name="controller_spawner" pkg="controller_manager" type="spawner" respawn="false"
            output="screen" ns="/quadruped_4" args="joint_trajectory_controller"/>

            <node pkg="robot_state_publisher" type="robot_state_publisher"  name="robot_state_publisher" respawn="false" output="screen">
              <remap from="/joint_states" to="/quadruped_4/joint_states" />
              <param name="publish_frequency" type="double" value="60.0" />
            </node>

            <node name="move_robot4" pkg="quadruped" type="quadruped_learn_ddpg_4.py" output="screen" />

    </include>
  </group>

</launch>
